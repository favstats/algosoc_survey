---
description-meta: "How confident are you that the following groups can tell the difference between content created by AI and content created by people?"
execute:
  echo: false
---

```{r setup, include=FALSE}
# here::i_am("wtm_gb.Rproj")


## Global options
knitr::opts_chunk$set(
    cache = F,
    echo = F,
    warning = F,
    message = F,
    cache.lazy = FALSE
)


pacman::p_load(htmltools, tidyverse, highcharter, gt, gtExtras, rvest, haven)

options(scipen = 999)
```


```{r echo=FALSE, results='asis'}

shiny::HTML(glue::glue('
<style>
#overlay {
  position: fixed;
  display: none;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0,0,0,0.5);
  z-index: 2;
  cursor: pointer;
  text-align: center;
  padding-top: 10%;
}

#text {
  position: relative;
  top: 50%;
  left: 50%;
  font-size: 20px;
  color: black;
  transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  width: 50%;
}
</style>

<div id="overlay" onclick="off()">
  <div id="text">
    <img src="algosoclogo.jpg" alt="Logo" style="width:150px;height:150px;">
    <h2>Welcome to the AlgoSoc Survey Dashboard</h2>
    <p>This dashboard aggregates data collected via the <a href="https://algosoc.org/" target="_blank">AlgoSoc Consortium</a> to show how citizens think and feel about AI in society.</p>
    <p>If you want to know more about AlgoSoc and our work on AI, visit us on <a href="https://algosoc.org/" target="_blank">algosoc.org</a>!</p>
  </div>
</div>

<script>
window.onload = function() {
  var popupLastShown = localStorage.getItem("popupLastShown");
  var now = new Date().getTime();

  if (!popupLastShown || now - popupLastShown > 60*60*1000) {  // 60*60*1000 milliseconds = 1 hour
    document.getElementById("overlay").style.display = "block";
    localStorage.setItem("popupLastShown", now);
  }
}

function off() {
  document.getElementById("overlay").style.display = "none";
}
</script>
', .open = ">>>", .close = "<<<"))




```




```{r include=FALSE}
# print(getwd())
# here::here("")
# prCint(getwd())
# hcoptslang <- getOption("highcharter.lang")
# 
# hcoptslang$shortMonths <- c("Jan", "Feb", "Mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec")
# 
# options(highcharter.lang = hcoptslang)

polvals <- read_sav("../cv23o_EN_1.0p.sav") %>% 
  mutate(left_right = cv23o101)

data <- read_sav("../L_AlgoSoc_wave1_1.0p.sav") %>% #table()
  mutate(age_groups = case_when(
    leeftijd %in% 16:17 ~ "16-17",
    leeftijd %in% 18:24 ~ "18-24",
    leeftijd %in% 25:34 ~ "25-34",
    leeftijd %in% 35:44 ~ "35-44",
    leeftijd %in% 45:54 ~ "45-54",
    leeftijd %in% 55:64 ~ "55-64",
    leeftijd %in% 65:150 ~ "65+",
  )) %>% 
  left_join(polvals %>% select(nomem_encr, left_right)) %>% 
  mutate(pol_cat = case_when(
    left_right %in% 0:4 ~ "left",
    left_right == 5 ~ "center",
    left_right %in% 6:10 ~ "right"
    ))

# hist(data$left_right)


std.error <- function(x) sd(x, na.rm =T)/sqrt(length(x))


# data %>% 
#   write_csv("../L_AlgoSoc_wave1_1.0p.csv")
```



```{=html}
<!-- Updated styling for tabs -->
<style>
  .tab {
    display: none;
  }
  .tab-header1 {
    display: flex;
    margin: 10px 0;
    overflow: hidden;
    background-color: #f1f1f1;
  }
  .tab-header2 {
    display: flex;
    margin: 10px 0;
    overflow: hidden;
    background-color: #f1f1f1;
  }
  .tab-header3 {
    display: flex;
    margin: 10px 0;
    overflow: hidden;
    background-color: #f1f1f1;
  }
  .tab-button {
    flex: 1;
    border: none;
    outline: none;
    cursor: pointer;
    padding: 10px 16px;
    transition: 0.3s;
    background-color: #007bff;
    color: white;
    text-align: center;
  }
  .tab-button:hover, .tab-button.active {
    background-color: #0056b3;
  }
  .tab-content {
    padding: 10px;
    margin-top: -1px;
  }
</style>



```


# Usage of AI Systems

> How often in the past year did you use...

<div class="tab-header1">
  <button class="tab-button" onclick="openTab(event, 'Tab1a')">Overall</button>
  <button class="tab-button" onclick="openTab(event, 'Tab2a')">By Age</button>
  <button class="tab-button" onclick="openTab(event, 'Tab3a')">By Gender</button>
  <button class="tab-button" onclick="openTab(event, 'Tab4a')">By Education</button>
  <button class="tab-button" onclick="openTab(event, 'Tab5a')">By Politics</button>
</div>


<div id="Tab1a" class="tab tab-content">


```{r}

generate_general <- function(data, var1, var2, thevarlabs) {
  
  media_rec <- data %>% 
  select(var1:var2) %>% 
  gather() %>% 
  group_by(key) %>% 
  summarize(mean_val = mean(value, na.rm =T),
            sd_val = std.error(value)) %>% 
  ungroup() %>% 
  mutate(varlabs = thevarlabs) %>% 
  mutate(varlabs = fct_reorder(varlabs, mean_val)) %>% 
  arrange(desc(varlabs))

theorder <<- media_rec %>% distinct(varlabs) %>% pull(varlabs) 

hchart(
  media_rec, 
  "column",
  hcaes(x = varlabs, y = mean_val)
  ) %>%
  hc_add_series(
    media_rec,
    "errorbar", 
    hcaes(y = mean_val, 
          x = varlabs, low = mean_val - sd_val, 
          high = mean_val + sd_val),
    enableMouseTracking = TRUE,
    showInLegend = FALSE
    ) %>% 
  highcharter::hc_plotOptions(
    errorbar = list(
      color = "black", 
      stemWidth = 1
    ) 
  ) %>% 
  highcharter::hc_xAxis(title = list(text = "")) %>% 
    hc_yAxis(
    title = list(text = "<- 1: never    -    7: very often ->"), 
    max = 7, min = 1
  )
  
}

data %>% 
  generate_general("ADM1", "ADM2", c("ChatGPT", "Midjourney"))


```


</div>

<div id="Tab2a" class="tab tab-content">



```{r}

by_age <- function(data, var1, var2, thevarlabs) {
  
  varlabdat <- data %>% 
    select(var1:var2) %>% 
    names() %>% 
    tibble(key = ., varlabs = thevarlabs)
  
  # thevarlabs
  
    # mutate(varlabs = c("ChatGPT", "Midjourney")) %>% 
media_rec_ages <- data %>% 
  select(var1:var2, age_groups) %>% 
  gather(key, value, -age_groups) %>% 
  group_by(key, age_groups) %>% 
  summarize(mean_val = mean(value, na.rm =T),
            sd_val = std.error(value)) %>% 
  ungroup() %>% 
  left_join(varlabdat) %>% 
  mutate(varlabs = factor(varlabs, levels = as.character(theorder))) %>%
  arrange(varlabs)%>% 
  arrange(age_groups)
  # mutate(varlabs = var_labels)
# as.character(theorder)
hchart(
  media_rec_ages, 
  "column",
  # hcaes(x = varlabs, y = mean_val),
  hcaes(x = varlabs, y = mean_val, group = age_groups),
  id = c("a", "b", "c", "d", "e", "f", "g")
  ) %>%
  
  hc_add_series(
    media_rec_ages,
    "errorbar", 
    hcaes(y = mean_val, 
          x = varlabs, low = mean_val - sd_val, 
          high = mean_val + sd_val,
          group = age_groups), 
    # hcaes(y = mean_val, x = key, low = mean_val - sd_val, high = mean_val + sd_val, group = Type),
  linkedTo = c("a", "b", "c", "d", "e", "f", "g"),
    enableMouseTracking = TRUE,
    showInLegend = FALSE
    ) %>% 
  highcharter::hc_plotOptions(
    errorbar = list(
      color = "black", 
      # whiskerLength = 1,
      stemWidth = 1
    ) 
  ) %>% 
  highcharter::hc_xAxis(title = list(text = "")) %>% 
    hc_yAxis(
    title = list(text = "<- 1: not at all    -    7: very often ->"), 
    max = 7, min = 1
  )
  
}


data %>% 
  by_age("ADM1", "ADM2", c("ChatGPT", "Midjourney"))
```

</div>

<div id="Tab3a" class="tab tab-content">

```{r}

by_gender <- function(data, var1, var2, thevarlabs) {
  
  varlabdat <- data %>% 
    select(var1:var2) %>% 
    names() %>% 
    tibble(key = ., varlabs = thevarlabs)
  
  media_rec_genders <- data %>% 
  # count(geslacht) %>% 
  mutate(geslacht = sjmisc::to_label(geslacht)) %>% 
  select(var1:var2, geslacht) %>% 
  gather(key, value, -geslacht) %>% 
  group_by(key, geslacht) %>% 
  summarize(mean_val = mean(value, na.rm =T),
            sd_val = std.error(value)) %>% 
  ungroup() %>% 
    left_join(varlabdat) %>% 
  mutate(varlabs = factor(varlabs, levels = as.character(theorder))) %>%
  arrange(varlabs)

hchart(
  media_rec_genders, 
  "column",
  # hcaes(x = varlabs, y = mean_val),
  hcaes(x = varlabs, y = mean_val, group = geslacht),
  id = c("a", "b", "c")
  ) %>%
  
  hc_add_series(
    media_rec_genders,
    "errorbar", 
    hcaes(y = mean_val, 
          x = varlabs, low = mean_val - sd_val, 
          high = mean_val + sd_val,
          group = geslacht),
    # hcaes(y = mean_val, x = key, low = mean_val - sd_val, high = mean_val + sd_val, group = Type),
    linkedTo = c("a", "b", "c"),
    enableMouseTracking = TRUE,
    showInLegend = FALSE
    ) %>% 
  highcharter::hc_plotOptions(
    errorbar = list(
      color = "black", 
      # whiskerLength = 1,
      stemWidth = 1
    ) 
  ) %>% 
  highcharter::hc_xAxis(title = list(text = "")) %>% 
    hc_yAxis(
    title = list(text = "<- 1: not at all    -    7: very often ->"), 
    max = 7, min = 1
  )

}

data %>% 
  by_gender("ADM1", "ADM2", c("ChatGPT", "Midjourney"))
```


</div>

<div id="Tab4a" class="tab tab-content">


```{r}

by_edu <- function(data, var1, var2, thevarlabs) {
  
  varlabdat <- data %>% 
    select(var1:var2) %>% 
    names() %>% 
    tibble(key = ., varlabs = thevarlabs)
  

media_rec_edu <- data %>% 
  drop_na(oplcat) %>% 
  # count(oplcat) %>% 
  mutate(oplcat = sjmisc::to_label(oplcat)) %>% 
  select(var1:var2, oplcat) %>% 
  gather(key, value, -oplcat) %>% 
  group_by(key, oplcat) %>% 
  summarize(mean_val = mean(value, na.rm =T),
            sd_val = std.error(value)) %>% 
  ungroup() %>% 
  left_join(varlabdat) %>% 
  mutate(varlabs = factor(varlabs, levels = as.character(theorder))) %>%
  arrange(varlabs)
  # mutate(varlabs = var_labels)

hchart(
  media_rec_edu, 
  "column",
  # hcaes(x = varlabs, y = mean_val),
  hcaes(x = varlabs, y = mean_val, group = oplcat),
  id = c("a", "b", "c", "d", "e", "f")
  ) %>%
  
  hc_add_series(
    media_rec_edu,
    "errorbar", 
    hcaes(y = mean_val, 
          x = varlabs, low = mean_val - sd_val, 
          high = mean_val + sd_val,
          group = oplcat),
    # hcaes(y = mean_val, x = key, low = mean_val - sd_val, high = mean_val + sd_val, group = Type),
    linkedTo = c("a", "b", "c", "d", "e", "f"),
    enableMouseTracking = TRUE,
    showInLegend = FALSE
    ) %>% 
  highcharter::hc_plotOptions(
    errorbar = list(
      color = "black", 
      # whiskerLength = 1,
      stemWidth = 1
    ) 
  ) %>% 
  highcharter::hc_xAxis(title = list(text = "")) %>% 
    hc_yAxis(
    title = list(text = "<- 1: not at all    -    7: very often ->"), 
    max = 7, min = 1
  )
}

data %>% 
  by_edu("ADM1", "ADM2", c("ChatGPT", "Midjourney"))
```

</div>

<div id="Tab5a" class="tab tab-content">


```{r}

by_pol <- function(data, var1, var2, thevarlabs) {
  
  varlabdat <- data %>% 
    select(var1:var2) %>% 
    names() %>% 
    tibble(key = ., varlabs = thevarlabs)
  

media_rec_edu <- data %>% 
  drop_na(pol_cat) %>% 
  # count(oplcat) %>% 
  mutate(oplcat = sjmisc::to_label(pol_cat)) %>% 
  select(var1:var2, pol_cat) %>% 
  gather(key, value, -pol_cat) %>% 
  group_by(key, pol_cat) %>% 
  summarize(mean_val = mean(value, na.rm =T),
            sd_val = std.error(value)) %>% 
  ungroup() %>% 
  left_join(varlabdat) %>% 
  mutate(varlabs = factor(varlabs, levels = as.character(theorder))) %>%
  arrange(varlabs) %>% 
  mutate(pol_cat = fct_relevel(pol_cat, c("left", "center", "right")))
  # mutate(varlabs = var_labels)

hchart(
  media_rec_edu, 
  "column",
  # hcaes(x = varlabs, y = mean_val),
  hcaes(x = varlabs, y = mean_val, group = pol_cat),
  id = c("a", "b", "c")
  ) %>%
  
  hc_add_series(
    media_rec_edu,
    "errorbar", 
    hcaes(y = mean_val, 
          x = varlabs, low = mean_val - sd_val, 
          high = mean_val + sd_val,
          group = pol_cat),
    # hcaes(y = mean_val, x = key, low = mean_val - sd_val, high = mean_val + sd_val, group = Type),
    linkedTo = c("a", "b", "c"),
    enableMouseTracking = TRUE,
    showInLegend = FALSE
    ) %>% 
  highcharter::hc_plotOptions(
    errorbar = list(
      color = "black", 
      # whiskerLength = 1,
      stemWidth = 1
    ) 
  ) %>% 
  highcharter::hc_xAxis(title = list(text = "")) %>% 
    hc_yAxis(
    title = list(text = "<- 1: not at all    -    7: very often ->"), 
    max = 7, min = 1
  )
}

data %>% 
  by_pol("ADM1", "ADM2", c("ChatGPT", "Midjourney"))
```

</div>

# Ability to Detect AI-Generated Content

> How confident are you that the following groups can tell the difference between content created by AI and content created by people?


<div class="tab-header2">
  <button class="tab-button" onclick="openTab(event, 'Tab1b')">Overall</button>
  <button class="tab-button" onclick="openTab(event, 'Tab2b')">By Age</button>
  <button class="tab-button" onclick="openTab(event, 'Tab3b')">By Gender</button>
  <button class="tab-button" onclick="openTab(event, 'Tab4b')">By Education</button>
  <button class="tab-button" onclick="openTab(event, 'Tab5b')">By Politics</button>
</div>


<div id="Tab1b" class="tab tab-content">

```{r}
var_labels <- c(
  "People from the general population",
  "Members of Parliament",
  "Judges",
  "Journalists",
  "Police officers",
  "Doctors",
  "Friends/family",
  "Yourself"
)

data %>% 
  generate_general("CONF1", "CONF8", var_labels)
```
</div>

<div id="Tab2b" class="tab tab-content">



```{r}
data %>% 
  by_age("CONF1", "CONF8", var_labels)
```



</div>


<div id="Tab3b" class="tab tab-content">

```{r}
data %>% 
  by_gender("CONF1", "CONF8", var_labels)
```



</div>


<div id="Tab4b" class="tab tab-content">

```{r}
data %>% 
  by_edu("CONF1", "CONF8", var_labels)
```

</div>

<div id="Tab5b" class="tab tab-content">

```{r}
data %>% 
  by_pol("CONF1", "CONF8", var_labels)
```

</div>


# Familiarity with AI terms

> How familiar are you with the following terms?

```{r}
var_labels <- c(
  "Generative AI",
  "ChatGPT",
  "Deepfakes",
  "Algorithms",
  "Chatbots"
)
```



<div class="tab-header3">
  <button class="tab-button" onclick="openTab(event, 'Tab1c')">Overall</button>
  <button class="tab-button" onclick="openTab(event, 'Tab2c')">By Age</button>
  <button class="tab-button" onclick="openTab(event, 'Tab3c')">By Gender</button>
  <button class="tab-button" onclick="openTab(event, 'Tab4c')">By Education</button>
  <button class="tab-button" onclick="openTab(event, 'Tab5c')">By Politics</button>
</div>


<div id="Tab1c" class="tab tab-content">

```{r}
data %>% 
  generate_general("KAI1", "KAI5", var_labels)
```
</div>

<div id="Tab2c" class="tab tab-content">



```{r}
data %>% 
  by_age("KAI1", "KAI5", var_labels)
```



</div>


<div id="Tab3c" class="tab tab-content">

```{r}
data %>% 
  by_gender("KAI1", "KAI5", var_labels)
```



</div>


<div id="Tab4c" class="tab tab-content">

```{r}
data %>% 
  by_edu("KAI1", "KAI5", var_labels)
```

</div>

<div id="Tab5c" class="tab tab-content">

```{r}
data %>% 
  by_pol("KAI1", "KAI5", var_labels)
```

</div>


```{=html}
<!-- JavaScript for Tabs -->
<script>
function openTab(evt, tabName) {
  var i, tabcontent, tabbuttons;
  tabcontent = document.getElementsByClassName("tab");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tabbuttons = document.getElementsByClassName("tab-button");
  for (i = 0; i < tabbuttons.length; i++) {
    tabbuttons[i].className = tabbuttons[i].className.replace(" active", "");
  }
  document.getElementById(tabName).style.display = "block";
  evt.currentTarget.className += " active";
}

// Open the first tab by default
document.addEventListener("DOMContentLoaded", function() {
  document.getElementsByClassName("tab-button")[0].click();
});
</script>
```






